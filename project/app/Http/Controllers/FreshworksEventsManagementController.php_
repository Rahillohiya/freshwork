<?php
namespace App\Http\Controllers;

use App\Entities\ChannelAccount;
use App\Entities\ChannelEvent;
use App\Entities\ChannelEventSetting;
use App\Entities\CustomApp;
use App\Services\Connectors\FreshworksApiLibrary;
use App\Services\Connectors\FreshworksClient;
use App\Services\ShopifyService;
use Illuminate\Http\Request;
use App\Entities\ChannelConfig;
use App\Entities\WebhookTopic;
use Session;

class FreshworksEventsManagementController extends Controller
{
    private $freshworks_api_library;
    private $clientId;
    private $clientSecret;
    private $instance_url;
    private $api_key;

    public function __construct(FreshworksApiLibrary $freshworks_api_library)
    {
        $this->freshworks_api_library   = $freshworks_api_library;
        $this->clientId                 = config('channel.freshworks_sandbox_client_id');
        $this->clientSecret             = config('channel.freshworks_sandbox_client_secret');
        $this->instance_url            = "";
        $this->api_key       = "";
    }

    function freshworks_online_app_account(Request $request)
    {

        $shop = session('shop');
        $account = null;
        $channel_id = $request->id;

        if (!empty($channel_id)) {
            $account = ChannelAccount::where('id', $channel_id)->where('shop_id', $shop['shop_id'])->first();
        }
        $login_credentials = $account ? $account->login_credentials : [];
        
        return view('freshworks_online.app_credentials_window', compact('account', 'login_credentials','channel_id','request'));
    }

    function store_freshworks_online_app_account(Request $request)
    {
        try {

            $shop = session('shop');
            $freshworks_online = CustomApp::firstOrNew([
                'shop_id' => $shop['shop_id'],
                'id' => $request->account_id ?? 0]);
             
            $login_credentials = [
                'instance_url' => $request->instance_url,
                'api_key' => $request->api_key,
            ];

            $freshworks_online->login_credentials = $login_credentials;
            //$freshworks_online->channel_id = channelIdByName('freshworks_online');
            $freshworks_online->shop_id = $shop['shop_id'];
            $freshworks_online->save();

            session()->put('custom_app_id', $freshworks_online->id);




            return response()->json([
                'code'      =>  200,
                'status'    =>  'success',
                'appId'     =>  $freshworks_online->id,
                'message'   =>  "freshworks_online app saved successfully"
            ], 200);

        } catch (\Exception $e) {

            $error_msg = $e->getMessage();
            return response()->json(['code' => 422, 'status' => 'error',
                'message' => $error_msg, 'errors' => [['message' => $error_msg]],
                'data' => new \stdClass()
            ], 422);
        }
    }

    public function freshworks_account_login(Request $request)
    {
        try {
            $shop = session('shop');

            if ($request->id != 0)
               $this->channel_account_id = $request->id;

            if ($request->account_type_splash_window == 1) {
                return view('freshworks_online.callback_window')->with([
                    'account_type_splash_window' => 1,
                    'channel_id' => $request->channel_id,
                    'id' => $request->id ?? 0,
                    'custom_app_id' => $request->custom_app_id ?? 0
                ]);
            } else {

                $freshworks_oauth_callback = config('channel.freshworks_oauth_callback');
                $authorizationRequestUrl = config('channel.freshworks_authorizationRequestUrl');
                $scope = config('channel.freshworks_oauth_scope');
                $response_type = "code";
                $certFilePath = '././././certificates/cacert.pem';

                if($request->account_type == 'production')
                    $this->setProductKeys();

                if($request->custom_app_id && $request->custom_app_id !=0)
                {
                    $this->custom_app_id = $request->custom_app_id;
                    $this->customApp($request->custom_app_id,$shop,$request->account_type);
                }

                $client = new FreshworksClient($this->clientId, $this->clientSecret, $certFilePath);

                $channel_id = $request->channel_id ?? 0;
                $state = $this->custom_app_id.'-'.$this->channel_account_id.'-'.$request->account_type.'-'. $channel_id;
                // set account type sandbox,production or test account

                $authUrl = $client->getAuthorizationURL($authorizationRequestUrl, $scope, $freshworks_oauth_callback, $response_type, $state);

                return redirect()->to($authUrl);
            }

        } catch (\Exception $e) {
            return $this->badLogin('Unable to login at the moment.');
        }
    }

    public function freshworks_callback(Request $request)
    {

        try {
            $shop = session('shop');
            $account_id   = 0;
            $account_type   = "";
            try {

                if($account_id == 0)
                $t_accounts = ChannelAccount::where('shop_id', $shop['shop_id'])->count();

                $freshworks_account = ChannelAccount::firstOrNew([
                    'shop_id' => $shop['shop_id'],
                    'id' => $account_id ?? 0]);

                if($account_id ==0) {
                    $account_name = "Freshworks Online #" . ($t_accounts > 0 ? $t_accounts + 1 : 1);
                }

                $this->customApp($request->custom_app_id,$shop);

                $login_credentials = [
                    'instance_url' => $this->instance_url,
                    'api_key' => $this->api_key,
                ];
                 //echo "<pre>"; print_r($login_credentials); echo "</pre>";die; 
                $freshworks_account->login_credentials = $login_credentials;
                //                $freshworks_account->channel_id = channelIdByName('freshworks_online');
                $freshworks_account->shop_id = $shop['shop_id'];
                $freshworks_account->custom_app_id  =  $request->custom_app_id;
                $freshworks_account->expired  =  false;
                $freshworks_account->save();

                return view('channel.callback_window');
            } catch (\Exception $e) {
                return $this->badLogin('Unable to login at the moment.Please try in few minutes.');
            }
        } catch (\Exception $e) {
            return $this->badLogin('Unable to login at the moment.Please try in few minutes.');
        }
    }

    public function setProductKeys(){
        $this->clientId     =   config('channel.freshworks_production_client_id');
        $this->clientSecret =   config('channel.freshworks_production_client_secret');
    }
    public function customApp($custom_app_id,$shop){
        $account = CustomApp::where('id',$custom_app_id)->where('shop_id', $shop['shop_id'])->first();
        if($account) {
            $this->instance_url = $account->login_credentials['instance_url'];
            $this->api_key = $account->login_credentials['api_key'];
        }
    }

    public function get_freshworks_resources(Request $request)
    {
        $final_array = [];
        $shop = session('shop');
        if (!$request->freshworks_object)
            return ['results' => $final_array];
        $freshworks_account = ChannelAccount::where('id', $request->channel_account_id)
            ->where('shop_id', $shop['shop_id'])->first();
        if ($request->freshworks_object == "currency") {
            return $this->freshworks_api_library->get_company_currencies($freshworks_account, $request);
        } elseif ($request->freshworks_object == "customers") {
            return $this->freshworks_api_library->get_company_customers($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "payment_methods") {
            return $this->freshworks_api_library->get_payment_methods($freshworks_account, $request);
        } elseif ($request->freshworks_object == "accounts") {
            return $this->freshworks_api_library->get_company_accounts($freshworks_account, 0, $request->AccountType, $request->AccountSubType, $request->Classification, $request);
        } elseif ($request->freshworks_object == "items") {
            return $this->freshworks_api_library->get_company_items($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "departments") {
            return $this->freshworks_api_library->get_company_departments($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "tax_codes") {
            return $this->freshworks_api_library->get_company_tax_codes($freshworks_account, $request);
        } elseif ($request->freshworks_object == "tax_rates") {
            return $this->freshworks_api_library->get_company_tax_rates($freshworks_account, $request);
        } elseif ($request->freshworks_object == "terms") {
            return $this->freshworks_api_library->get_company_terms($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "class") {
            return $this->freshworks_api_library->get_company_class($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "vendors") {
            return $this->freshworks_api_library->get_company_vendors($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "invoices") {
            return $this->freshworks_api_library->get_company_invoices($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "payments") {
            return $this->freshworks_api_library->get_company_payments($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "journal_codes") {
            return $this->freshworks_api_library->get_company_journal_codes($freshworks_account, 0, $request);
        } elseif ($request->freshworks_object == "employees") {
            return $this->freshworks_api_library->get_company_employees($freshworks_account, 0, $request);
        }
        return ['results' => $final_array];
    }

    public function load_freshworks_fields_section(Request $request)
    {
        $shop = session('shop');
        $freshworks_account = ChannelAccount::where('id', $request->channel_account_id)
            ->where('shop_id', $shop['shop_id'])->first();
        if (!$freshworks_account)
            return response()->json(['status' => 'error', 'message' => 'No account details found.']);
        if (!$request->channel_event_id || !$channel_event = ChannelEvent::where('id', $request->channel_event_id)->first())
            return response()->json(['status' => 'error', 'message' => 'No channel event found.']);
        $channel_event_settings = null;
//        if request from edit mysql webhook event (prefilled already users table and request data in views)
        if (isset($request->channel_event_setting_id) && !empty($request->channel_event_setting_id)) {
            $channel_event_settings = ChannelEventSetting::where('id', $request->channel_event_setting_id)->first();
        }
        $api_fields = $channel_event_settings && $channel_event_settings->api_fields ? $channel_event_settings->api_fields : [];
        return view("freshworks_online.load_api_fields_section",
            compact('channel_event_settings', 'api_fields', 'channel_event'));

    }

    public function badLogin($message)
    {
        $login_section_not_required = true;
        return view('errors.un_verrified_shopify_request', compact('message', 'login_section_not_required'));
    }
}